function Linear Convolution:
function[y] = linearconvulation(x,h)

n1 = length(x);
n2 = length(h);

N = (n1+n2) - 1;

x1 = [x zeros(1, N-n1)];

h1 = [h zeros(1, N-n2)];


for n = 1:N
    for m = 1:N
        
        if n>m
            H(m,n) = 0;
        else
            H(m,n) = h1(m - (n-1));
        end
    end
end

y = H * x1';

end




function circular convolution:
function[z] = circularconvulation(x1,x2)
n1 = length(x1);
n2 = length(x2);

N = max(n1,n2);

x1 = [x1 zeros(1, N-n1)];

x2 = [x2 zeros(1, N-n2)];

s = n1 - n2;

if(s==0)
    x2 = [x2 zeros(1,s)];
else
    x1 = [x1 zeros(1,-s)];
    x2 = [x2 zeros(1,s)];
end

%circular multiplication
z = [];

for k = 1:N
    y = 0;
    for i = 1:N
        j = (k-i) + 1;
        if(j<=0)
            j = j + N;
        end
        y = y + (x1(i) * x2(j));
    end
    z = [z,y];
end

end




Run code with input value for output value and figure drawing:
clc;
clear;
close all;

x = [3,11,7,0,-1,4,2];

h = [2,3,0,-5,2,1];

[linearoutput] = linearconvulation(x,h);

[circularoutput] = circularconvulation(x,h);

figure(1);
plot(linearoutput);
hold on;
plot(circularoutput);